name: Deploy to Azure VPS

on:
  workflow_dispatch:
jobs:
  deploy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v5
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          script: |
            console.log(context.repo);
            const repo = context.repo;
            const release = await github.rest.repos.getLatestRelease({
              owner: repo.owner,
              repo: repo.repo
            });
            core.setOutput('tag_name', release.data.tag_name);

      - name: Download artifact from latest release
        with:
          repo: ${{ github.repository }}
          tag: ${{ steps.get_release.outputs.tag_name }}
          file: dist.zip
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
            if [ $# -lt 4 ] ;then
              echo "Usage: <github token> <org/repo> <filename> <version or 'latest'>"
              exit 1
            fi
            
            TOKEN="$1"
            REPO="$2"
            FILE="$3"      # the name of your release asset file, e.g. build.tar.gz
            VERSION=$4                       # tag name or the word "latest"
            GITHUB_API_ENDPOINT="api.github.com"
            
            alias errcho='>&2 echo'
            
            function gh_curl() {
          curl -sL -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            $@
          }
            
            if [ "$VERSION" = "latest" ]; then
            # Github should return the latest release first.
            PARSER=".[0].assets | map(select(.name == \"$FILE\"))[0].id"
            else
            PARSER=". | map(select(.tag_name == \"$VERSION\"))[0].assets | map(select(.name == \"$FILE\"))[0].id"
            fi
            
            ASSET_ID=`gh_curl https://$GITHUB_API_ENDPOINT/repos/$REPO/releases | jq "$PARSER"`
            if [ "$ASSET_ID" = "null" ]; then
          errcho "ERROR: version not found $VERSION"
            exit 1
            fi
          
          curl -sL --header "Authorization: token $TOKEN" --header 'Accept: application/octet-stream' https://$TOKEN:@$GITHUB_API_ENDPOINT/repos/$REPO/releases/assets/$ASSET_ID > $FILE

      - name: Extract build archive
        run: unzip dist.zip -d dist/

      - name: Create deployment directory on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            mkdir -p /home/azureuser/deploy

      - name: Deploy to Azure VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          source: "dist/*"
          target: "/home/azureuser/deploy"

      - name: Move files to web directory and restart Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            sudo rsync -av --delete /home/azureuser/deploy/dist/backoffice /var/www/html/
            sudo systemctl restart nginx